/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TimeEventService } from "../timeEvent.service";
import { TimeEventCreateInput } from "./TimeEventCreateInput";
import { TimeEvent } from "./TimeEvent";
import { TimeEventFindManyArgs } from "./TimeEventFindManyArgs";
import { TimeEventWhereUniqueInput } from "./TimeEventWhereUniqueInput";
import { TimeEventUpdateInput } from "./TimeEventUpdateInput";

export class TimeEventControllerBase {
  constructor(protected readonly service: TimeEventService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TimeEvent })
  async createTimeEvent(
    @common.Body() data: TimeEventCreateInput
  ): Promise<TimeEvent> {
    return await this.service.createTimeEvent({
      data: data,
      select: {
        createdAt: true,
        id: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TimeEvent] })
  @ApiNestedQuery(TimeEventFindManyArgs)
  async timeEvents(@common.Req() request: Request): Promise<TimeEvent[]> {
    const args = plainToClass(TimeEventFindManyArgs, request.query);
    return this.service.timeEvents({
      ...args,
      select: {
        createdAt: true,
        id: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TimeEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async timeEvent(
    @common.Param() params: TimeEventWhereUniqueInput
  ): Promise<TimeEvent | null> {
    const result = await this.service.timeEvent({
      where: params,
      select: {
        createdAt: true,
        id: true,
        timestamp: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TimeEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTimeEvent(
    @common.Param() params: TimeEventWhereUniqueInput,
    @common.Body() data: TimeEventUpdateInput
  ): Promise<TimeEvent | null> {
    try {
      return await this.service.updateTimeEvent({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TimeEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTimeEvent(
    @common.Param() params: TimeEventWhereUniqueInput
  ): Promise<TimeEvent | null> {
    try {
      return await this.service.deleteTimeEvent({
        where: params,
        select: {
          createdAt: true,
          id: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
